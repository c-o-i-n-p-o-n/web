import type { NextPage } from "next";
import Head from "next/head";

import CustomHeader from "../containers/CustomHeader/CustomHeader";

import Container from "@mui/material/Container";

import HomePageItem from "../components/HomePageItem";
import Match from "../models/Match";

import { CircularProgress } from "@mui/material";
import { useEffect, useState } from "react";
import { useQuery } from "react-query";
import CenteredComponent from "../components/CenteredComponent";
import { BetService } from "../services/BetService";
import { BookmakerService } from "../services/BookmakerService";
import { MatchService } from "../services/MatchService";
import { AuthService } from "../services/AuthService";
import { Column } from "../styles/shared-styles";
import Bookmakers from "../containers/Bookmakers";
import Divider from '@mui/material/Divider';
import FAB, { FloatingButtonFAB } from "../components/Dropdown/Fab";

import CasinoIcon from '@mui/icons-material/Casino';
import { useRouter } from "next/router";
import ItemProperty from "../components/ItemProperty";
import AvatarImage from "../components/AvatarImage";
import PromoImage from "../components/PromoImage";
import ShareButtons from "../components/ShareButtons";
import ServerError from "../models/ServerError";
import Alert from "../components/Alert/Alert";

const betService = new BetService();
const bookmakerService = new BookmakerService();
const authService = new AuthService();
const matchService = new MatchService();

const MatchCreated: NextPage = () => {


  const [successMessage, setSuccessMessage] = useState("");
  const [errorMessage, setErrorMessage] = useState("");
  const [match, setMatch] = useState<Match | undefined>(undefined);
  //const router = useRouter();
  const { push,query } = useRouter();
  const [logged, setLogged] = useState<Boolean>(false);

  const loading = !!!match;
  const matchId = Number(query.matchId)


  console.log(query.matchId);
  console.log(matchId);
  //const { isLoading, error, data: user, isSuccess } = useQuery(['getUser'], authService.getUser);
  const { isLoading, error, data: bookmaker, isSuccess } = useQuery(['getBookmaker'], authService.getBookmaker);

  //const owner = match?.bookmaker?.id === bookmaker?.id;
  
  useEffect(() => {
    let active = true;
    console.log(loading);
    console.log(match);
    console.log(bookmaker);
    console.log(matchId);
    console.log(query.matchId);
    console.log(Number(query.matchId));
    if (!loading) {
      return undefined;
    }
    const fetchMatch = async () => {
        setMatch(await matchService.getMatchById(matchId));
        console.log(match);
    }

    fetchMatch().catch(()=>{
      //push('create-match');
      console.log(matchId);
    });

    return () => {
        active = false;
    };
  });//, [loading,matchId]);

  console.log(match);

  useEffect(() => {

    setLogged(authService.isLogged);
    
  }, [bookmaker]);

  const newMatch = () => {
    push('create-match');
  }

  const onEditHandler = (match: Match, changes: any, alertMessage: string) => {

      console.log(match);
      console.log(changes);
      const matchService = new MatchService();
      matchService.updateMatch(match, changes)
          .then((_res: Match) => {
            setSuccessMessage(alertMessage)
            setMatch(_res)
          })
          .catch((err: ServerError) => {
            console.log("Erro interno");
            setErrorMessage("Erro interno")
          });
  };

  return (
    <div>
      <Head>
        <title>matchId</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <CustomHeader />
      {isLoading || loading ? <CenteredComponent>
            <CircularProgress />
          </CenteredComponent> :
          <Container>
          <HomePageItem>
            {/* <MatchPromoImage/> com botões de edição e compartilhamento*/}
            <Column>
              <ItemProperty>
                <ShareButtons link={window.location.href} bannerLink={match?.photo || match?.logo}/>
              </ItemProperty>
            </Column>
          </HomePageItem>
          <HomePageItem>
            {/* <MatchPromoImage/> com botões de edição e compartilhamento*/}
           
            <Column>
              <ItemProperty>
                <PromoImage entity={match} bookmaker={bookmaker || undefined} onEditHandler={onEditHandler}/>
              </ItemProperty>
            </Column>
          </HomePageItem>
          <HomePageItem>
            {/* <MatchImage/> com botões de edição e compartilhamento*/}
             
            <Column>
              <ItemProperty>
                <AvatarImage entity={match} bookmaker={bookmaker || undefined} onEditHandler={onEditHandler}/>
              </ItemProperty>
            </Column>
          </HomePageItem>
          <HomePageItem>
            {/* <MatchParaInstaImage/> com botão de compartilhamento*/}
          </HomePageItem>
          <HomePageItem>
            {/* <MatchLink/> com botão de compartilhamento*/}
          </HomePageItem>
          <HomePageItem>
            {/* <MatchQRCode/> com botão de compartilhamento*/}
          </HomePageItem>
          <HomePageItem>
            {/* <MatchStatistics/> com botão de compartilhamento*/}
          </HomePageItem>
          <Alert type="success" show={!!successMessage} closeAll={()=> setSuccessMessage("")}>
              <p>{successMessage}</p>
          </Alert>
          <Alert type="error" show={!!errorMessage} closeAll={()=> setErrorMessage("")}>
              <p>{errorMessage}</p>
          </Alert>
  
          <HomePageItem>
          <FloatingButtonFAB/>
          </HomePageItem>
          {/* <HomePageItem
            title="Bookmakers"
            showSeeMore
            seeMoreHandler={seeMoreHandler}
          >
          <Bookmakers bookmakers={bookmakers} size={listSize}></Bookmakers>
          </HomePageItem> */}
        </Container>
        }
      

      {/* <CreateBet/> */}
    </div>
  );
};

export default MatchCreated;
