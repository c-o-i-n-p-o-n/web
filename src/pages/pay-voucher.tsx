import type { NextPage } from "next";
import { useEffect, useState } from "react";
import { useQuery } from "react-query";

import { useRouter } from "next/router";
import Head from "next/head";
import CustomHeader from "../containers/CustomHeader/CustomHeader";
import CenteredComponent from "../components/CenteredComponent";
import { CircularProgress, colors, IconButton, Tooltip } from "@mui/material";
import Container from "@mui/material/Container";
import HomePageItem from "../components/HomePageItem";
import Alert from "../components/Alert/Alert";
import FAB, { FloatingButtonFAB } from "../components/Dropdown/Fab";
import { Column } from "../styles/shared-styles";
import ItemProperty from "../components/ItemProperty";

import { AuthService } from "../services/AuthService";
import { CurrencyService } from "../services/CurrencyService";

import Currency from "../models/Currency";
import { QRCodeSVG } from "qrcode.react";
//import FullCurrencyCard from "../components/CurrencyCard/FullCurrencyCard";
//import AmountAndCheckRescue from "../components/CurrencyCard/AmountAndCheckRescue";
import { VoucherBillingService } from "../services/VoucherBillingService";

import CheckIcon from "@mui/icons-material/Check";
import Bookmaker from "../models/Bookmaker";
import Transference from "../models/Transference";
import TransferneceDetails from "../components/CurrencyCard/TransferenceDetails";
import { StyledTypographyTitle } from "../components/CurrencyCard/FullCurrencyCard.styles";
import ContentCopyIcon from "@mui/icons-material/ContentCopy";
import Voucher from "../models/Voucher";
import ManualValidationActions from "../components/VoucherCard/ManualValidationActions";
import VoucherBilling from "../models/VoucherBilling";

const authService = new AuthService();
const currencyService = new CurrencyService();
const voucherBillingService = new VoucherBillingService();

const PayVoucher: NextPage = () => {

    const [successMessage, setSuccessMessage] = useState("");
    const [errorMessage, setErrorMessage] = useState("");
    const [paid, setPaid] = useState<boolean>(false);
    const [copied, setCopied] = useState(false);
    const [logged, setLogged] = useState<Boolean>(false);
    //const [voucher, setVoucher] = useState<Voucher | undefined>(undefined);
    const [voucherBilling, setVoucherBilling] = useState<VoucherBilling | undefined>(undefined);
    //const { push,query } = useRouter();
    
    const router = useRouter();

    const { isLoading, error, data: bookmaker, isSuccess } = useQuery(['getBookmaker'], authService.getBookmaker);

    const voucherBillingId = Number(router.query.voucherBillingId as string);
    console.log(voucherBillingId)
    //const uRL = transference?.hash?transferenceService.getURLRescue(transference?.hash):"";
    //console.log(uRL)
    
    const loading = !!!voucherBilling;
  
    useEffect(() => {
      let active = true;
      if (!loading) {
        return undefined;
      }
      if(!!voucherBillingId){
        console.log(voucherBillingId);
        voucherBillingService.getVoucherBillingById(voucherBillingId).then((_voucherBilling)=>{
          setVoucherBilling(_voucherBilling);
        }).catch((erro)=>{
          if(!!setErrorMessage){
            setErrorMessage(erro.message)
          }
        })
      }
  
      return () => {
          active = false;
      };
    }, [loading,voucherBillingId]);
    
    const checkPaymentHandler = () => {
      console.log(voucherBilling);
      console.log(voucherBilling?.paymentWayJoins.financialKey);
    
      if(!!voucherBilling?.paymentWayJoins.financialKey){
        voucherBillingService.check(voucherBilling.id).then((ok)=>{
          setPaid(ok)
          if(ok){
            setSuccessMessage("O emitente já validou seu pagamento")
          }else{
            setErrorMessage("O emitente ainda não validou seu pagamento")
          }
          
        }).catch((erro)=>{
          if(!!setErrorMessage){
            setErrorMessage(erro.message)
          }
        })
      }
    };

    const copyToClipboard = () => {
        if(!!(voucherBilling?.key)){
            navigator.clipboard.writeText(voucherBilling?.key);
            setCopied(true);
            setTimeout(() => setCopied(false), 2000); // Reseta a mensagem após 2 segundos
        }
    };
    
    
    useEffect(() => {
      setLogged(authService.isLogged);
      if(!logged && !!isLoading){//} && (!isSuccess || !!error)){
          router.push('/')
      }
    }, [bookmaker,router,logged,isLoading]);

  return (
    <div>
      <Head>
        <title>BRL$</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <CustomHeader />
      {isLoading || loading ? <CenteredComponent>
            <CircularProgress />
          </CenteredComponent> :
          <Container>
          <HomePageItem>
            <Column>
              <CenteredComponent>
                {paid && !!(voucherBilling.paymentWayJoins.financialKey)?<CheckIcon />:<QRCodeSVG  value={!!(voucherBilling.key)?voucherBilling.key:""} size={200}/>}                
              </CenteredComponent>
            </Column>
          </HomePageItem>
          <HomePageItem>
            <Column>
              <CenteredComponent>
              <ItemProperty>
                <div
                  style={{
                    border: "1px solid #ccc",
                    padding: "8px",
                    wordBreak: "break-word",   // força a quebra de palavras longas
                    overflowWrap: "break-word" // equivalente, para compatibilidade
                  }}
                >
                  <b>{voucherBilling.key}</b>
                </div>


              </ItemProperty>
              <ItemProperty>
              
                <Tooltip title={copied ? "Copiado!" : "Copiar"}>
                  <IconButton onClick={copyToClipboard} color="primary">
                    {copied ? <CheckIcon color="success" /> : <ContentCopyIcon />}
                  </IconButton>
                </Tooltip>
              </ItemProperty>
              </CenteredComponent>
            </Column>
          </HomePageItem>

          
          <HomePageItem>
           
            <Column>
              <ItemProperty>
                {loading ? <CenteredComponent>
                  <CircularProgress />
                </CenteredComponent> :
                <ManualValidationActions voucherBilling={voucherBilling} key={0} chekPayment={checkPaymentHandler}/>}
              </ItemProperty>
            </Column>
          </HomePageItem>

          
          
          
          <Alert type="success" show={!!successMessage} closeAll={()=> setSuccessMessage("")}>
              <p>{successMessage}</p>
          </Alert>
          <Alert type="error" show={!!errorMessage} closeAll={()=> setErrorMessage("")}>
              <p>{errorMessage}</p>
          </Alert>
  
          <HomePageItem>
          <FloatingButtonFAB/>
          </HomePageItem>
        </Container>
        }
      

      {/* <CreateBet/> */}
    </div>
  );
};


export default PayVoucher;