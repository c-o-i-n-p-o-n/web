import type { NextPage } from "next";
import Head from "next/head";

import CustomHeader from "../containers/CustomHeader/CustomHeader";

import Container from "@mui/material/Container";

import HomePageItem from "../components/HomePageItem";
import Match from "../models/Match";

import { CircularProgress } from "@mui/material";
import { useEffect, useState } from "react";
import { useQuery } from "react-query";
import CenteredComponent from "../components/CenteredComponent";
//import { BetService } from "../services/BetService";
import { BookmakerService } from "../services/BookmakerService";
import { VoucherService } from "../services/VoucherService";
import { AuthService } from "../services/AuthService";
import { Column } from "../styles/shared-styles";
import Bookmakers from "../containers/Bookmakers";
import Divider from '@mui/material/Divider';
import FAB, { FloatingButtonFAB } from "../components/Dropdown/Fab";

import CasinoIcon from '@mui/icons-material/Casino';
import { useRouter } from "next/router";
import ItemProperty from "../components/ItemProperty";
import AvatarImage from "../components/AvatarImage";
import PromoImage from "../components/PromoImage";
import ShareButtons from "../components/ShareButtons";
import ServerError from "../models/ServerError";
import Alert from "../components/Alert/Alert";
import Voucher from "../models/Voucher";
import DetailsComponent from "../components/DetailsComponent";
import VoucherRules from "../components/VoucherProperties/VoucherRules";
import VoucherData from "../components/VoucherProperties/VoucherData";
import TakeVoucherButton from "../components/VoucherProperties/TakeVoucherButton";
import BookmakersData from "../components/BookmakersProperties/BookmakersData";
import CancelVoucherButton from "../components/VoucherProperties/CancelVoucherButton";

//const betService = new BetService();
const bookmakerService = new BookmakerService();
const authService = new AuthService();
const voucherService = new VoucherService();

const VoucheCreated: NextPage = () => {


  const [successMessage, setSuccessMessage] = useState("");
  const [errorMessage, setErrorMessage] = useState("");
  const [voucher, setVoucher] = useState<Voucher | undefined>(undefined);
  //const router = useRouter();
  const { push,query } = useRouter();
  const [logged, setLogged] = useState<Boolean>(false);

  const loading = !!!voucher;
  const voucherId = Number(query.voucherId)


  console.log(query.voucherId);
  console.log(voucherId);
  //const { isLoading, error, data: user, isSuccess } = useQuery(['getUser'], authService.getUser);
  const { isLoading, error, data: bookmaker, isSuccess } = useQuery(['getBookmaker'], authService.getBookmaker);

  //const owner = match?.bookmaker?.id === bookmaker?.id;
  
  useEffect(() => {
    let active = true;
    console.log(loading);
    console.log(voucher);
    console.log(bookmaker);
    console.log(voucherId);
    console.log(query.voucherId);
    console.log(Number(query.voucherId));
    if (!loading) {
      return undefined;
    }
    const fetchVoucher = async () => {
      setVoucher(await voucherService.getVoucherById(voucherId));
        console.log(voucher);
    }

    fetchVoucher().catch(()=>{
      //push('create-match');
      console.log(voucherId);
    });

    return () => {
        active = false;
    };
  });//, [loading,voucherId]);

  console.log(voucher);

  useEffect(() => {
    setLogged(authService.isLogged);
  }, [bookmaker]);

  const newVoucher = () => {
    push('create-voucher');
  }

  const onEditHandler = (voucher: Voucher, changes: any, alertMessage: string) => {

      console.log(voucher);
      console.log(changes);
      //const matchService = new MatchService();
      voucherService.updateVoucher(voucher, changes)
          .then((_res: Voucher) => {
            setSuccessMessage(alertMessage)
            setVoucher(_res)
          })
          .catch((err: ServerError) => {
            console.log("Erro interno");
            setErrorMessage("Erro interno")
          });
  };

  // if(!logged && !isLoading && (!!isSuccess || !!error)){
  //   push('login')
  // }

  return (
    <div>
      <Head>
        <title>{voucher?.hid}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <CustomHeader />
      {isLoading || loading ? <CenteredComponent>
            <CircularProgress />
          </CenteredComponent> :
          <Container>
          <HomePageItem>
            {/* <MatchPromoImage/> com botões de edição e compartilhamento*/}
            <Column>
              <ItemProperty>
                <ShareButtons link={window.location.href} bannerLink={voucher?.photo || voucher?.logo}/>
              </ItemProperty>
            </Column>
          </HomePageItem>
          <HomePageItem>
            {/* <MatchPromoImage/> com botões de edição e compartilhamento*/}
           
            <Column>
              <ItemProperty>
                <PromoImage entity={voucher} bookmaker={bookmaker || undefined} onEditHandler={onEditHandler}/>
              </ItemProperty>
            </Column>
          </HomePageItem>
          <HomePageItem>
            {/* <MatchImage/> com botões de edição e compartilhamento*/}
             
            <Column>
              <ItemProperty>
                <AvatarImage entity={voucher} bookmaker={bookmaker || undefined} onEditHandler={onEditHandler}/>
              </ItemProperty>
            </Column>
          </HomePageItem>
          <HomePageItem>
            <ItemProperty>
              <VoucherRules voucher={voucher} title={"Leia as Regras (Importante!)"}/> {/* descricao (nao editavel) */}
            </ItemProperty>
          </HomePageItem>
          <HomePageItem>
            <ItemProperty>
              <VoucherData voucher={voucher} bookmaker={bookmaker || undefined} onEditHandler={onEditHandler} title={"Dados do Vale Cupom"}/> {/* informacoes editaveis do voucer (talvez seja visivel apenas para o owner) */}
            </ItemProperty>
          </HomePageItem>
          <HomePageItem>
            <TakeVoucherButton voucher={voucher} bookmaker={bookmaker || undefined}/>
          </HomePageItem>
          <HomePageItem>
            <BookmakersData bookmaker={bookmaker || undefined}/>
          </HomePageItem>
          <HomePageItem>
            <CancelVoucherButton voucher={voucher} bookmaker={bookmaker || undefined}/>
          </HomePageItem>
          <Alert type="success" show={!!successMessage} closeAll={()=> setSuccessMessage("")}>
              <p>{successMessage}</p>
          </Alert>
          <Alert type="error" show={!!errorMessage} closeAll={()=> setErrorMessage("")}>
              <p>{errorMessage}</p>
          </Alert>
  
          <HomePageItem>
          <FloatingButtonFAB/>
          </HomePageItem>
          {/* <HomePageItem
            title="Bookmakers"
            showSeeMore
            seeMoreHandler={seeMoreHandler}
          >
          <Bookmakers bookmakers={bookmakers} size={listSize}></Bookmakers>
          </HomePageItem> */}
        </Container>
        }
      

      {/* <CreateBet/> */}
    </div>
  );
};

export default VoucheCreated;
